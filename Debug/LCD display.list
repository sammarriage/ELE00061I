
LCD display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080023b8  080023b8  000033b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002404  08002404  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002404  08002404  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002404  08002404  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002404  08002404  00003404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002408  08002408  00003408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800240c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000480d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000115b  00000000  00000000  00008849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e0  00000000  00000000  000099a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000394  00000000  00000000  00009e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019049  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000638c  00000000  00000000  00023265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092669  00000000  00000000  000295f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bbc5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011c8  00000000  00000000  000bbca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000bce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023a0 	.word	0x080023a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023a0 	.word	0x080023a0

080001c8 <LCR_MicroDelay>:
// LCR_MicroDelay attempts to delay by the requested number of microseconds
// The factors were determined experimentally for the Nucleo-G071RB board
// running at 64 MHz with no compiler optimisations.
enum eLCD_OP { READ_INSTRUCTION, WRITE_INSTRUCTION, READ_DATA, WRITE_DATA };
uint8_t LCD_shift = 0;
void LCR_MicroDelay (uint32_t delayInMicroSeconds) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  float compensation = (float)SystemCoreClock / (float)16e6;
 80001d0:	4b15      	ldr	r3, [pc, #84]	@ (8000228 <LCR_MicroDelay+0x60>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	ee07 3a90 	vmov	s15, r3
 80001d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80001dc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800022c <LCR_MicroDelay+0x64>
 80001e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80001e4:	edc7 7a03 	vstr	s15, [r7, #12]
  volatile unsigned long x = (unsigned long)(compensation * (36 * delayInMicroSeconds >> 4));
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	4613      	mov	r3, r2
 80001ec:	00db      	lsls	r3, r3, #3
 80001ee:	4413      	add	r3, r2
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	091b      	lsrs	r3, r3, #4
 80001f4:	ee07 3a90 	vmov	s15, r3
 80001f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80001fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000208:	ee17 3a90 	vmov	r3, s15
 800020c:	60bb      	str	r3, [r7, #8]
  while (x-- > 0);
 800020e:	bf00      	nop
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	1e5a      	subs	r2, r3, #1
 8000214:	60ba      	str	r2, [r7, #8]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d1fa      	bne.n	8000210 <LCR_MicroDelay+0x48>
}
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	20000000 	.word	0x20000000
 800022c:	4b742400 	.word	0x4b742400

08000230 <LCR_Set_As_Output>:

void LCR_Set_As_Output(int bit, GPIO_TypeDef* port) {
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
    // MODER set to "01" (general purpose output)
    // OTYPER set to "0" (push-pull output)
    // OSPEEDR set to "10" (high-speed - perhaps not required)
    // PUPDR set to "00" (no pull-up or pull-down)
	  // It also sets the output low.
	port->BSRR = 1UL < (16 + bit);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3310      	adds	r3, #16
 800023e:	2b01      	cmp	r3, #1
 8000240:	bf8c      	ite	hi
 8000242:	2301      	movhi	r3, #1
 8000244:	2300      	movls	r3, #0
 8000246:	b2db      	uxtb	r3, r3
 8000248:	461a      	mov	r2, r3
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	619a      	str	r2, [r3, #24]
	unsigned long bitMask = ~(3UL << 2*bit);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	2203      	movs	r2, #3
 8000254:	fa02 f303 	lsl.w	r3, r2, r3
 8000258:	43db      	mvns	r3, r3
 800025a:	60fb      	str	r3, [r7, #12]
	port->MODER = (port->MODER & bitMask) | (1UL << 2*bit);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	401a      	ands	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	431a      	orrs	r2, r3
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	601a      	str	r2, [r3, #0]
	port->OTYPER &= ~(1UL << bit);
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	2101      	movs	r1, #1
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	43db      	mvns	r3, r3
 8000282:	401a      	ands	r2, r3
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	605a      	str	r2, [r3, #4]
	port->OSPEEDR = (port->OSPEEDR & bitMask) | (2UL << 2*bit);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	689a      	ldr	r2, [r3, #8]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	401a      	ands	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	2102      	movs	r1, #2
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	609a      	str	r2, [r3, #8]
    port->PUPDR = (port->PUPDR & bitMask) | (0UL << 2*bit);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	68da      	ldr	r2, [r3, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	401a      	ands	r2, r3
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	60da      	str	r2, [r3, #12]
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <LCD_Set_Data>:
// also less likely to be interrupted by a reset in the middle of an operation,
// and this can upset it (I'm still not entirely clear why this happens, or
// how to kick it out of whatever random state it gets into at these times).
#define LCD_DELAY_CONST 500

void LCD_Set_Data(uint8_t data) {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	// This takes the lowest four bits in data and puts them on the
	// relevant pins of the LCD (LCD_D4 to LCD_D7) in four-bit mode.
	GPIOA->BSRR = (data & 0x1) ? 0x1 << 4 : 0x1 << 20;
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <LCD_Set_Data+0x18>
 80002cc:	2310      	movs	r3, #16
 80002ce:	e001      	b.n	80002d4 <LCD_Set_Data+0x1c>
 80002d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d8:	6193      	str	r3, [r2, #24]
	GPIOA->BSRR = (data & 0x2) ? 0x1 << 5 : 0x1 << 21;
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f003 0302 	and.w	r3, r3, #2
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <LCD_Set_Data+0x30>
 80002e4:	2320      	movs	r3, #32
 80002e6:	e001      	b.n	80002ec <LCD_Set_Data+0x34>
 80002e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80002ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f0:	6193      	str	r3, [r2, #24]
	GPIOA->BSRR = (data & 0x4) ? 0x1 << 6 : 0x1 << 22;
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <LCD_Set_Data+0x48>
 80002fc:	2340      	movs	r3, #64	@ 0x40
 80002fe:	e001      	b.n	8000304 <LCD_Set_Data+0x4c>
 8000300:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000304:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000308:	6193      	str	r3, [r2, #24]
	GPIOA->BSRR = (data & 0x8) ? 0x1 << 7 : 0x1 << 23;
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <LCD_Set_Data+0x60>
 8000314:	2380      	movs	r3, #128	@ 0x80
 8000316:	e001      	b.n	800031c <LCD_Set_Data+0x64>
 8000318:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800031c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000320:	6193      	str	r3, [r2, #24]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LCD_Set_RS>:
void LCD_Set_RS(uint8_t data) {
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	4603      	mov	r3, r0
 8000336:	71fb      	strb	r3, [r7, #7]
	// Sets the RS control line to either high or low:
	GPIOA->BSRR = data ? 0x1 << 0 : 0x1 << 16;
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <LCD_Set_RS+0x14>
 800033e:	2301      	movs	r3, #1
 8000340:	e001      	b.n	8000346 <LCD_Set_RS+0x18>
 8000342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000346:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800034a:	6193      	str	r3, [r2, #24]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <LCD_Set_RW>:
void LCD_Set_RW(uint8_t data) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	// Sets the RW control line to either high or low:
	GPIOF->BSRR = data ? 0x1 << 1 : 0x1 << 17;
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <LCD_Set_RW+0x14>
 8000368:	2302      	movs	r3, #2
 800036a:	e001      	b.n	8000370 <LCD_Set_RW+0x18>
 800036c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000370:	4a03      	ldr	r2, [pc, #12]	@ (8000380 <LCD_Set_RW+0x28>)
 8000372:	6193      	str	r3, [r2, #24]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	48001400 	.word	0x48001400

08000384 <LCD_Set_E>:
void LCD_Set_E(uint8_t data) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	// Sets the RW control line to either high or low:
	GPIOA->BSRR = data ? 0x1 << 1 : 0x1 << 17;
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <LCD_Set_E+0x14>
 8000394:	2302      	movs	r3, #2
 8000396:	e001      	b.n	800039c <LCD_Set_E+0x18>
 8000398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800039c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003a0:	6193      	str	r3, [r2, #24]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <LCR_LCD_IsBusy>:
uint8_t LCR_LCD_IsBusy () {
 80003ae:	b580      	push	{r7, lr}
 80003b0:	af00      	add	r7, sp, #0
  // For now, I'll just use the delay version of this.  Wait for a ms:
  LCR_MicroDelay(1000);
 80003b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b6:	f7ff ff07 	bl	80001c8 <LCR_MicroDelay>
  return 0;
 80003ba:	2300      	movs	r3, #0
}
 80003bc:	4618      	mov	r0, r3
 80003be:	bd80      	pop	{r7, pc}

080003c0 <LCR_LCD_Write>:
void LCR_LCD_Write (enum eLCD_OP op, uint8_t data) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	4613      	mov	r3, r2
 80003ce:	71bb      	strb	r3, [r7, #6]
  // Writes a byte to the LCD.  This assumes four-bit mode.
  if (op == WRITE_DATA) LCD_Set_RS(1);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	d103      	bne.n	80003de <LCR_LCD_Write+0x1e>
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ffa9 	bl	800032e <LCD_Set_RS>
 80003dc:	e005      	b.n	80003ea <LCR_LCD_Write+0x2a>
  else if (op == WRITE_INSTRUCTION) LCD_Set_RS(0);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d133      	bne.n	800044c <LCR_LCD_Write+0x8c>
 80003e4:	2000      	movs	r0, #0
 80003e6:	f7ff ffa2 	bl	800032e <LCD_Set_RS>
  else return;

  unsigned int toWrite_High = (data >> 4) & 0x0f;
 80003ea:	79bb      	ldrb	r3, [r7, #6]
 80003ec:	091b      	lsrs	r3, r3, #4
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	f003 030f 	and.w	r3, r3, #15
 80003f4:	60fb      	str	r3, [r7, #12]
  unsigned int toWrite_Low = data & 0x0f;
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	f003 030f 	and.w	r3, r3, #15
 80003fc:	60bb      	str	r3, [r7, #8]
  LCD_Set_Data(toWrite_High);
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff58 	bl	80002b8 <LCD_Set_Data>
  LCR_MicroDelay(LCD_DELAY_CONST); LCD_Set_E(1);
 8000408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800040c:	f7ff fedc 	bl	80001c8 <LCR_MicroDelay>
 8000410:	2001      	movs	r0, #1
 8000412:	f7ff ffb7 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(LCD_DELAY_CONST); LCD_Set_E(0);
 8000416:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800041a:	f7ff fed5 	bl	80001c8 <LCR_MicroDelay>
 800041e:	2000      	movs	r0, #0
 8000420:	f7ff ffb0 	bl	8000384 <LCD_Set_E>
  LCD_Set_Data(toWrite_Low);
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff45 	bl	80002b8 <LCD_Set_Data>
  LCR_MicroDelay(LCD_DELAY_CONST); LCD_Set_E(1);
 800042e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000432:	f7ff fec9 	bl	80001c8 <LCR_MicroDelay>
 8000436:	2001      	movs	r0, #1
 8000438:	f7ff ffa4 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(LCD_DELAY_CONST); LCD_Set_E(0);
 800043c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000440:	f7ff fec2 	bl	80001c8 <LCR_MicroDelay>
 8000444:	2000      	movs	r0, #0
 8000446:	f7ff ff9d 	bl	8000384 <LCD_Set_E>
 800044a:	e000      	b.n	800044e <LCR_LCD_Write+0x8e>
  else return;
 800044c:	bf00      	nop
}
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <LCR_LCD_Init>:
void LCR_LCD_Init (void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  // The LCD uses GPIOs A, B and F, so these clocks are required:
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOFEN;
 8000458:	4b4a      	ldr	r3, [pc, #296]	@ (8000584 <LCR_LCD_Init+0x130>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a49      	ldr	r2, [pc, #292]	@ (8000584 <LCR_LCD_Init+0x130>)
 800045e:	f443 038c 	orr.w	r3, r3, #4587520	@ 0x460000
 8000462:	6153      	str	r3, [r2, #20]

  // Relevant control GPIO pins are PA8 (RS), PF1 (RW), PF0 (E)
  LCR_Set_As_Output(8, GPIOA);
 8000464:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000468:	2008      	movs	r0, #8
 800046a:	f7ff fee1 	bl	8000230 <LCR_Set_As_Output>
  LCR_Set_As_Output(1, GPIOF);
 800046e:	4946      	ldr	r1, [pc, #280]	@ (8000588 <LCR_LCD_Init+0x134>)
 8000470:	2001      	movs	r0, #1
 8000472:	f7ff fedd 	bl	8000230 <LCR_Set_As_Output>
  LCR_Set_As_Output(0, GPIOF);
 8000476:	4944      	ldr	r1, [pc, #272]	@ (8000588 <LCR_LCD_Init+0x134>)
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff fed9 	bl	8000230 <LCR_Set_As_Output>

  // And for data, GPIOB 1, 6, 7 and 0
  LCR_Set_As_Output(0, GPIOB);
 800047e:	4943      	ldr	r1, [pc, #268]	@ (800058c <LCR_LCD_Init+0x138>)
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff fed5 	bl	8000230 <LCR_Set_As_Output>
  LCR_Set_As_Output(1, GPIOB);
 8000486:	4941      	ldr	r1, [pc, #260]	@ (800058c <LCR_LCD_Init+0x138>)
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff fed1 	bl	8000230 <LCR_Set_As_Output>
  LCR_Set_As_Output(6, GPIOB);
 800048e:	493f      	ldr	r1, [pc, #252]	@ (800058c <LCR_LCD_Init+0x138>)
 8000490:	2006      	movs	r0, #6
 8000492:	f7ff fecd 	bl	8000230 <LCR_Set_As_Output>
  LCR_Set_As_Output(7, GPIOB);
 8000496:	493d      	ldr	r1, [pc, #244]	@ (800058c <LCR_LCD_Init+0x138>)
 8000498:	2007      	movs	r0, #7
 800049a:	f7ff fec9 	bl	8000230 <LCR_Set_As_Output>
  //
  // You can't wait for the LCD to say it's ready yet, as the
  // instruction set has to be chosen first (see datasheet).
  // So these operations have to go slowly:

  LCR_MicroDelay(15000);
 800049e:	f643 2098 	movw	r0, #15000	@ 0x3a98
 80004a2:	f7ff fe91 	bl	80001c8 <LCR_MicroDelay>
  LCD_Set_RS(0); // Set LCD_RS low
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff ff41 	bl	800032e <LCD_Set_RS>
  LCD_Set_RW(0); // Set LCD_RW low
 80004ac:	2000      	movs	r0, #0
 80004ae:	f7ff ff53 	bl	8000358 <LCD_Set_RW>
  LCD_Set_Data(3);  // Set the LCD_D4-D7 to 0b0011
 80004b2:	2003      	movs	r0, #3
 80004b4:	f7ff ff00 	bl	80002b8 <LCD_Set_Data>
  LCR_MicroDelay(5000); LCD_Set_E(1); // Set LCD_E high
 80004b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004bc:	f7ff fe84 	bl	80001c8 <LCR_MicroDelay>
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ff5f 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(5000); LCD_Set_E(0); // Set LCD_E low
 80004c6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004ca:	f7ff fe7d 	bl	80001c8 <LCR_MicroDelay>
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff ff58 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(5000); LCD_Set_E(1); // Set LCD_E high
 80004d4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004d8:	f7ff fe76 	bl	80001c8 <LCR_MicroDelay>
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff ff51 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(5000); LCD_Set_E(0); // Set LCD_E low
 80004e2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004e6:	f7ff fe6f 	bl	80001c8 <LCR_MicroDelay>
 80004ea:	2000      	movs	r0, #0
 80004ec:	f7ff ff4a 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(5000); LCD_Set_E(1); // Set LCD_E high
 80004f0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004f4:	f7ff fe68 	bl	80001c8 <LCR_MicroDelay>
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff ff43 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(5000); LCD_Set_E(0); // Set LCD_E low
 80004fe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000502:	f7ff fe61 	bl	80001c8 <LCR_MicroDelay>
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ff3c 	bl	8000384 <LCD_Set_E>

  // Now LCD should be in eight-bit mode no matter where it started
  // from, so we can set the LCD to four-bit mode unambiguously with
  // one write cycle:
  LCD_Set_Data(2);  // Set the LCD_D4-D7 to 0b0010
 800050c:	2002      	movs	r0, #2
 800050e:	f7ff fed3 	bl	80002b8 <LCD_Set_Data>
  LCR_MicroDelay(5000); LCD_Set_E(1); // Set LCD_E high
 8000512:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000516:	f7ff fe57 	bl	80001c8 <LCR_MicroDelay>
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff ff32 	bl	8000384 <LCD_Set_E>
  LCR_MicroDelay(5000); LCD_Set_E(0); // Set LCD_E low
 8000520:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000524:	f7ff fe50 	bl	80001c8 <LCR_MicroDelay>
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff ff2b 	bl	8000384 <LCD_Set_E>

  // Now can set the other control bits: two-line and 5*8 pixels
  while (LCR_LCD_IsBusy());
 800052e:	bf00      	nop
 8000530:	f7ff ff3d 	bl	80003ae <LCR_LCD_IsBusy>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1fa      	bne.n	8000530 <LCR_LCD_Init+0xdc>
  LCR_LCD_Write(WRITE_INSTRUCTION, 0x28);
 800053a:	2128      	movs	r1, #40	@ 0x28
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff3f 	bl	80003c0 <LCR_LCD_Write>

  // Display ON/OFF Control: ON, no cursor
  while (LCR_LCD_IsBusy());
 8000542:	bf00      	nop
 8000544:	f7ff ff33 	bl	80003ae <LCR_LCD_IsBusy>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1fa      	bne.n	8000544 <LCR_LCD_Init+0xf0>
  LCR_LCD_Write(WRITE_INSTRUCTION, 0x0c);
 800054e:	210c      	movs	r1, #12
 8000550:	2001      	movs	r0, #1
 8000552:	f7ff ff35 	bl	80003c0 <LCR_LCD_Write>

  // Clear the display
  while (LCR_LCD_IsBusy());
 8000556:	bf00      	nop
 8000558:	f7ff ff29 	bl	80003ae <LCR_LCD_IsBusy>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1fa      	bne.n	8000558 <LCR_LCD_Init+0x104>
  LCR_LCD_Write(WRITE_INSTRUCTION, 0x01);
 8000562:	2101      	movs	r1, #1
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ff2b 	bl	80003c0 <LCR_LCD_Write>

  // Entry Mode Set: increment address (move right)
  while (LCR_LCD_IsBusy());
 800056a:	bf00      	nop
 800056c:	f7ff ff1f 	bl	80003ae <LCR_LCD_IsBusy>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1fa      	bne.n	800056c <LCR_LCD_Init+0x118>
  LCR_LCD_Write(WRITE_INSTRUCTION, 0x06);
 8000576:	2106      	movs	r1, #6
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff ff21 	bl	80003c0 <LCR_LCD_Write>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	48001400 	.word	0x48001400
 800058c:	48000400 	.word	0x48000400

08000590 <LCR_LCD_Clear>:
void LCR_LCD_Clear (void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  while (LCR_LCD_IsBusy());
 8000594:	bf00      	nop
 8000596:	f7ff ff0a 	bl	80003ae <LCR_LCD_IsBusy>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1fa      	bne.n	8000596 <LCR_LCD_Clear+0x6>
  LCR_LCD_Write(WRITE_INSTRUCTION, 0x01);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ff0c 	bl	80003c0 <LCR_LCD_Write>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <LCR_LCD_GoToXY>:
void LCR_LCD_GoToXY (int x, int y) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  while (LCR_LCD_IsBusy());
 80005b6:	bf00      	nop
 80005b8:	f7ff fef9 	bl	80003ae <LCR_LCD_IsBusy>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1fa      	bne.n	80005b8 <LCR_LCD_GoToXY+0xc>
  if( y == 0 ) {
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10d      	bne.n	80005e4 <LCR_LCD_GoToXY+0x38>
    LCR_LCD_Write(WRITE_INSTRUCTION, 0x80 | (x & 0x3F));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff feef 	bl	80003c0 <LCR_LCD_Write>
  }
  else if( y == 1 ) {
    LCR_LCD_Write(WRITE_INSTRUCTION, 0xC0 | (x & 0x3F));
  }
}
 80005e2:	e00c      	b.n	80005fe <LCR_LCD_GoToXY+0x52>
  else if( y == 1 ) {
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d109      	bne.n	80005fe <LCR_LCD_GoToXY+0x52>
    LCR_LCD_Write(WRITE_INSTRUCTION, 0xC0 | (x & 0x3F));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff fee1 	bl	80003c0 <LCR_LCD_Write>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <LCR_LCD_WriteString>:
void LCR_LCD_WriteChar (char ch) {
  // Write a character to the data register on the LCD:
  while (LCR_LCD_IsBusy());
  LCR_LCD_Write(WRITE_DATA, ch);
}
void LCR_LCD_WriteString (char *s, int maxLength) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
  while(*s && maxLength-- > 0) {
 8000610:	e00d      	b.n	800062e <LCR_LCD_WriteString+0x28>
	// LCR_MicroDelay(10000); // This works, but
    while (LCR_LCD_IsBusy()){} // This does not
 8000612:	bf00      	nop
 8000614:	f7ff fecb 	bl	80003ae <LCR_LCD_IsBusy>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1fa      	bne.n	8000614 <LCR_LCD_WriteString+0xe>
    LCR_LCD_Write(WRITE_DATA, *s++);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	2003      	movs	r0, #3
 800062a:	f7ff fec9 	bl	80003c0 <LCR_LCD_Write>
  while(*s && maxLength-- > 0) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d004      	beq.n	8000640 <LCR_LCD_WriteString+0x3a>
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	603a      	str	r2, [r7, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	dce8      	bgt.n	8000612 <LCR_LCD_WriteString+0xc>
  }
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 f95a 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f826 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f860 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCD
  LCR_LCD_Init();
 8000658:	f7ff fefc 	bl	8000454 <LCR_LCD_Init>

  LCR_LCD_Clear();
 800065c:	f7ff ff98 	bl	8000590 <LCR_LCD_Clear>

  // Display "Hello World" on the LCD
  LCR_LCD_GoToXY(0, 0);  // Move to the first row, first column
 8000660:	2100      	movs	r1, #0
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ffa2 	bl	80005ac <LCR_LCD_GoToXY>
  LCR_LCD_WriteString("16x2 LCD DISPLAY", 16);  // Write "Hello World" on the LCD
 8000668:	2110      	movs	r1, #16
 800066a:	480a      	ldr	r0, [pc, #40]	@ (8000694 <main+0x4c>)
 800066c:	f7ff ffcb 	bl	8000606 <LCR_LCD_WriteString>

  // Display "Hello World" on the LCD
  LCR_LCD_GoToXY(6, 1);  // Move to the first row, first column
 8000670:	2101      	movs	r1, #1
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff ff9a 	bl	80005ac <LCR_LCD_GoToXY>
  LCR_LCD_WriteString("TEST", 4);  // Write "Hello World" on the LCD
 8000678:	2104      	movs	r1, #4
 800067a:	4807      	ldr	r0, [pc, #28]	@ (8000698 <main+0x50>)
 800067c:	f7ff ffc3 	bl	8000606 <LCR_LCD_WriteString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Toggle LED on GPIOB Pin 3 for testing */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000680:	2108      	movs	r1, #8
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <main+0x54>)
 8000684:	f000 fc38 	bl	8000ef8 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000688:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800068c:	f000 f9a0 	bl	80009d0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000690:	bf00      	nop
 8000692:	e7f5      	b.n	8000680 <main+0x38>
 8000694:	080023b8 	.word	0x080023b8
 8000698:	080023cc 	.word	0x080023cc
 800069c:	48000400 	.word	0x48000400

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b090      	sub	sp, #64	@ 0x40
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2228      	movs	r2, #40	@ 0x28
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fe4a 	bl	8002348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2310      	movs	r3, #16
 80006cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fc28 	bl	8000f2c <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006e2:	f000 f879 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fc52 	bl	8001fa8 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800070a:	f000 f865 	bl	80007d8 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	@ 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 8000734:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a1b      	ldr	r2, [pc, #108]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 8000764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000776:	2200      	movs	r2, #0
 8000778:	21f3      	movs	r1, #243	@ 0xf3
 800077a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077e:	f000 fba3 	bl	8000ec8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2108      	movs	r1, #8
 8000786:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <MX_GPIO_Init+0xbc>)
 8000788:	f000 fb9e 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800078c:	23f3      	movs	r3, #243	@ 0xf3
 800078e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f000 fa1d 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007aa:	2308      	movs	r3, #8
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_GPIO_Init+0xbc>)
 80007c2:	f000 fa0f 	bl	8000be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000400 	.word	0x48000400

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <Error_Handler+0x8>

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <HAL_MspInit+0x44>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <HAL_MspInit+0x44>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_MspInit+0x44>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_MspInit+0x44>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <NMI_Handler+0x4>

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <MemManage_Handler+0x4>

08000844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <UsageFault_Handler+0x4>

08000854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000882:	f000 f885 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f001 fd3b 	bl	8002358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e2:	f7ff feb1 	bl	8000648 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f4:	0800240c 	.word	0x0800240c
  ldr r2, =_sbss
 80008f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008fc:	2000002c 	.word	0x2000002c

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_Init+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <HAL_Init+0x28>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f931 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f808 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff ff60 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x54>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_InitTick+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f93b 	bl	8000bca <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e00e      	b.n	800097c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d80a      	bhi.n	800097a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f911 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4a06      	ldr	r2, [pc, #24]	@ (800098c <HAL_InitTick+0x5c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000000 	.word	0x20000000
 8000988:	20000008 	.word	0x20000008
 800098c:	20000004 	.word	0x20000004

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_IncTick+0x24>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_IncTick+0x24>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000028 	.word	0x20000028

080009b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000028 	.word	0x20000028

080009d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff ffee 	bl	80009b8 <HAL_GetTick>
 80009dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e8:	d005      	beq.n	80009f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <HAL_Delay+0x44>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4413      	add	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009f6:	bf00      	nop
 80009f8:	f7ff ffde 	bl	80009b8 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d8f7      	bhi.n	80009f8 <HAL_Delay+0x28>
  {
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	@ (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	@ 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	@ 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff8e 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff47 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff5c 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff8e 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffb0 	bl	8000b38 <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	e14e      	b.n	8000e92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8140 	beq.w	8000e8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d005      	beq.n	8000c24 <HAL_GPIO_Init+0x40>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d130      	bne.n	8000c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	f003 0201 	and.w	r2, r3, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d017      	beq.n	8000cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d123      	bne.n	8000d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0203 	and.w	r2, r3, #3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 809a 	beq.w	8000e8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	4b55      	ldr	r3, [pc, #340]	@ (8000eb0 <HAL_GPIO_Init+0x2cc>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a54      	ldr	r2, [pc, #336]	@ (8000eb0 <HAL_GPIO_Init+0x2cc>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b52      	ldr	r3, [pc, #328]	@ (8000eb0 <HAL_GPIO_Init+0x2cc>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d70:	4a50      	ldr	r2, [pc, #320]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d9a:	d013      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a46      	ldr	r2, [pc, #280]	@ (8000eb8 <HAL_GPIO_Init+0x2d4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d00d      	beq.n	8000dc0 <HAL_GPIO_Init+0x1dc>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a45      	ldr	r2, [pc, #276]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x1d8>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a44      	ldr	r2, [pc, #272]	@ (8000ec0 <HAL_GPIO_Init+0x2dc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d101      	bne.n	8000db8 <HAL_GPIO_Init+0x1d4>
 8000db4:	2303      	movs	r3, #3
 8000db6:	e006      	b.n	8000dc6 <HAL_GPIO_Init+0x1e2>
 8000db8:	2305      	movs	r3, #5
 8000dba:	e004      	b.n	8000dc6 <HAL_GPIO_Init+0x1e2>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e002      	b.n	8000dc6 <HAL_GPIO_Init+0x1e2>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <HAL_GPIO_Init+0x1e2>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	f002 0203 	and.w	r2, r2, #3
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	4093      	lsls	r3, r2
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dd6:	4937      	ldr	r1, [pc, #220]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de4:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e08:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e32:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f47f aea9 	bne.w	8000bf4 <HAL_GPIO_Init+0x10>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	48000c00 	.word	0x48000c00
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43d9      	mvns	r1, r3
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	400b      	ands	r3, r1
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f3c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f001 b823 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 817d 	beq.w	8001262 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f68:	4bbc      	ldr	r3, [pc, #752]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d00c      	beq.n	8000f8e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f74:	4bb9      	ldr	r3, [pc, #740]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d15c      	bne.n	800103a <HAL_RCC_OscConfig+0x10e>
 8000f80:	4bb6      	ldr	r3, [pc, #728]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f8c:	d155      	bne.n	800103a <HAL_RCC_OscConfig+0x10e>
 8000f8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f92:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fa2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x94>
 8000fba:	4ba8      	ldr	r3, [pc, #672]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	e015      	b.n	8000fec <HAL_RCC_OscConfig+0xc0>
 8000fc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fc4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fd8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000fdc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000fe0:	fa93 f3a3 	rbit	r3, r3
 8000fe4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000fe8:	4b9c      	ldr	r3, [pc, #624]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ff0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000ff4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000ff8:	fa92 f2a2 	rbit	r2, r2
 8000ffc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001000:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001004:	fab2 f282 	clz	r2, r2
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	f042 0220 	orr.w	r2, r2, #32
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	f002 021f 	and.w	r2, r2, #31
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 811f 	beq.w	8001260 <HAL_RCC_OscConfig+0x334>
 8001022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001026:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 8116 	bne.w	8001260 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	f000 bfaf 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800103e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800104a:	d106      	bne.n	800105a <HAL_RCC_OscConfig+0x12e>
 800104c:	4b83      	ldr	r3, [pc, #524]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a82      	ldr	r2, [pc, #520]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8001052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	e036      	b.n	80010c8 <HAL_RCC_OscConfig+0x19c>
 800105a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800105e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x158>
 800106a:	4b7c      	ldr	r3, [pc, #496]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a7b      	ldr	r2, [pc, #492]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8001070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b79      	ldr	r3, [pc, #484]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a78      	ldr	r2, [pc, #480]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 800107c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e021      	b.n	80010c8 <HAL_RCC_OscConfig+0x19c>
 8001084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001088:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x184>
 8001096:	4b71      	ldr	r3, [pc, #452]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a70      	ldr	r2, [pc, #448]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b6e      	ldr	r3, [pc, #440]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a6d      	ldr	r2, [pc, #436]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0x19c>
 80010b0:	4b6a      	ldr	r3, [pc, #424]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a69      	ldr	r2, [pc, #420]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b67      	ldr	r3, [pc, #412]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a66      	ldr	r2, [pc, #408]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c8:	4b64      	ldr	r3, [pc, #400]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	f023 020f 	bic.w	r2, r3, #15
 80010d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	495f      	ldr	r1, [pc, #380]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d059      	beq.n	80011a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc61 	bl	80009b8 <HAL_GetTick>
 80010f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fc5c 	bl	80009b8 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b64      	cmp	r3, #100	@ 0x64
 800110a:	d902      	bls.n	8001112 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	f000 bf43 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
 8001112:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001116:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001126:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	095b      	lsrs	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x218>
 800113e:	4b47      	ldr	r3, [pc, #284]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	e015      	b.n	8001170 <HAL_RCC_OscConfig+0x244>
 8001144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001148:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800115c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001160:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800116c:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001170:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001174:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001178:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800117c:	fa92 f2a2 	rbit	r2, r2
 8001180:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001184:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001188:	fab2 f282 	clz	r2, r2
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f002 021f 	and.w	r2, r2, #31
 8001198:	2101      	movs	r1, #1
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0ab      	beq.n	80010fc <HAL_RCC_OscConfig+0x1d0>
 80011a4:	e05d      	b.n	8001262 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc07 	bl	80009b8 <HAL_GetTick>
 80011aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc02 	bl	80009b8 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b64      	cmp	r3, #100	@ 0x64
 80011be:	d902      	bls.n	80011c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f000 bee9 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
 80011c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011ca:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80011da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	095b      	lsrs	r3, r3, #5
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2cc>
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	e015      	b.n	8001224 <HAL_RCC_OscConfig+0x2f8>
 80011f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011fc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800120c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001210:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001214:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_RCC_OscConfig+0x330>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001224:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001228:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800122c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001230:	fa92 f2a2 	rbit	r2, r2
 8001234:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001238:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800123c:	fab2 f282 	clz	r2, r2
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f042 0220 	orr.w	r2, r2, #32
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	f002 021f 	and.w	r2, r2, #31
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ab      	bne.n	80011b0 <HAL_RCC_OscConfig+0x284>
 8001258:	e003      	b.n	8001262 <HAL_RCC_OscConfig+0x336>
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 817d 	beq.w	8001572 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001278:	4ba6      	ldr	r3, [pc, #664]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00b      	beq.n	800129c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001284:	4ba3      	ldr	r3, [pc, #652]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b08      	cmp	r3, #8
 800128e:	d172      	bne.n	8001376 <HAL_RCC_OscConfig+0x44a>
 8001290:	4ba0      	ldr	r3, [pc, #640]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d16c      	bne.n	8001376 <HAL_RCC_OscConfig+0x44a>
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80012ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_OscConfig+0x3a0>
 80012c6:	4b93      	ldr	r3, [pc, #588]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	e013      	b.n	80012f4 <HAL_RCC_OscConfig+0x3c8>
 80012cc:	2302      	movs	r3, #2
 80012ce:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80012e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80012e8:	fa93 f3a3 	rbit	r3, r3
 80012ec:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	2202      	movs	r2, #2
 80012f6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80012fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80012fe:	fa92 f2a2 	rbit	r2, r2
 8001302:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001306:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800130a:	fab2 f282 	clz	r2, r2
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f042 0220 	orr.w	r2, r2, #32
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	f002 021f 	and.w	r2, r2, #31
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <HAL_RCC_OscConfig+0x410>
 8001326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d002      	beq.n	800133c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f000 be2e 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b75      	ldr	r3, [pc, #468]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001348:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	21f8      	movs	r1, #248	@ 0xf8
 8001352:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800135a:	fa91 f1a1 	rbit	r1, r1
 800135e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001362:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001366:	fab1 f181 	clz	r1, r1
 800136a:	b2c9      	uxtb	r1, r1
 800136c:	408b      	lsls	r3, r1
 800136e:	4969      	ldr	r1, [pc, #420]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001374:	e0fd      	b.n	8001572 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800137a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8088 	beq.w	8001498 <HAL_RCC_OscConfig+0x56c>
 8001388:	2301      	movs	r3, #1
 800138a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800139a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	461a      	mov	r2, r3
 80013b0:	2301      	movs	r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb00 	bl	80009b8 <HAL_GetTick>
 80013b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fafb 	bl	80009b8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d902      	bls.n	80013d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f000 bde2 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80013e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	095b      	lsrs	r3, r3, #5
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d102      	bne.n	8001404 <HAL_RCC_OscConfig+0x4d8>
 80013fe:	4b45      	ldr	r3, [pc, #276]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	e013      	b.n	800142c <HAL_RCC_OscConfig+0x500>
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800141c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001428:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	2202      	movs	r2, #2
 800142e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001432:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800143e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	f002 021f 	and.w	r2, r2, #31
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0af      	beq.n	80013be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	21f8      	movs	r1, #248	@ 0xf8
 8001474:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800147c:	fa91 f1a1 	rbit	r1, r1
 8001480:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001484:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001488:	fab1 f181 	clz	r1, r1
 800148c:	b2c9      	uxtb	r1, r1
 800148e:	408b      	lsls	r3, r1
 8001490:	4920      	ldr	r1, [pc, #128]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
 8001496:	e06c      	b.n	8001572 <HAL_RCC_OscConfig+0x646>
 8001498:	2301      	movs	r3, #1
 800149a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80014aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	461a      	mov	r2, r3
 80014c0:	2300      	movs	r3, #0
 80014c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fa78 	bl	80009b8 <HAL_GetTick>
 80014c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fa73 	bl	80009b8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d902      	bls.n	80014e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	f000 bd5a 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80014f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d104      	bne.n	8001518 <HAL_RCC_OscConfig+0x5ec>
 800150e:	4b01      	ldr	r3, [pc, #4]	@ (8001514 <HAL_RCC_OscConfig+0x5e8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	e015      	b.n	8001540 <HAL_RCC_OscConfig+0x614>
 8001514:	40021000 	.word	0x40021000
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001530:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800153c:	4bc8      	ldr	r3, [pc, #800]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	2202      	movs	r2, #2
 8001542:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001546:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800154a:	fa92 f2a2 	rbit	r2, r2
 800154e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001552:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001556:	fab2 f282 	clz	r2, r2
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f042 0220 	orr.w	r2, r2, #32
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	f002 021f 	and.w	r2, r2, #31
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f202 	lsl.w	r2, r1, r2
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ad      	bne.n	80014ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8110 	beq.w	80017a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d079      	beq.n	800168c <HAL_RCC_OscConfig+0x760>
 8001598:	2301      	movs	r3, #1
 800159a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80015aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	4bab      	ldr	r3, [pc, #684]	@ (8001864 <HAL_RCC_OscConfig+0x938>)
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	461a      	mov	r2, r3
 80015be:	2301      	movs	r3, #1
 80015c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff f9f9 	bl	80009b8 <HAL_GetTick>
 80015c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff f9f4 	bl	80009b8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d902      	bls.n	80015e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	f000 bcdb 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
 80015e2:	2302      	movs	r3, #2
 80015e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80015ec:	fa93 f3a3 	rbit	r3, r3
 80015f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015fc:	2202      	movs	r2, #2
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001604:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	fa93 f2a3 	rbit	r2, r3
 800160e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	fa93 f2a3 	rbit	r2, r3
 8001632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001636:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800163a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163c:	4b88      	ldr	r3, [pc, #544]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 800163e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001644:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001648:	2102      	movs	r1, #2
 800164a:	6019      	str	r1, [r3, #0]
 800164c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001650:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f1a3 	rbit	r1, r3
 800165a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001662:	6019      	str	r1, [r3, #0]
  return result;
 8001664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001668:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0a0      	beq.n	80015cc <HAL_RCC_OscConfig+0x6a0>
 800168a:	e08d      	b.n	80017a8 <HAL_RCC_OscConfig+0x87c>
 800168c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001690:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ae:	601a      	str	r2, [r3, #0]
  return result;
 80016b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b68      	ldr	r3, [pc, #416]	@ (8001864 <HAL_RCC_OscConfig+0x938>)
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	461a      	mov	r2, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f973 	bl	80009b8 <HAL_GetTick>
 80016d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff f96e 	bl	80009b8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d902      	bls.n	80016ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f000 bc55 	b.w	8001f98 <HAL_RCC_OscConfig+0x106c>
 80016ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016f6:	2202      	movs	r2, #2
 80016f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	fa93 f2a3 	rbit	r2, r3
 8001708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001716:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001722:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	fa93 f2a3 	rbit	r2, r3
 800172c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001730:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001746:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001754:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001758:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 800175c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800175e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001762:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001766:	2102      	movs	r1, #2
 8001768:	6019      	str	r1, [r3, #0]
 800176a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f1a3 	rbit	r1, r3
 8001778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001780:	6019      	str	r1, [r3, #0]
  return result;
 8001782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001786:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d197      	bne.n	80016d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 81a1 	beq.w	8001b00 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c4:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d116      	bne.n	80017fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80017e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80017f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <HAL_RCC_OscConfig+0x93c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11a      	bne.n	8001840 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_RCC_OscConfig+0x93c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <HAL_RCC_OscConfig+0x93c>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001814:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff f8cf 	bl	80009b8 <HAL_GetTick>
 800181a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7ff f8ca 	bl	80009b8 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b64      	cmp	r3, #100	@ 0x64
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e3b1      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_RCC_OscConfig+0x93c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10d      	bne.n	800186c <HAL_RCC_OscConfig+0x940>
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a02      	ldr	r2, [pc, #8]	@ (8001860 <HAL_RCC_OscConfig+0x934>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e03c      	b.n	80018d8 <HAL_RCC_OscConfig+0x9ac>
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	10908120 	.word	0x10908120
 8001868:	40007000 	.word	0x40007000
 800186c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001870:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x96a>
 800187c:	4bc1      	ldr	r3, [pc, #772]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4ac0      	ldr	r2, [pc, #768]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	4bbe      	ldr	r3, [pc, #760]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4abd      	ldr	r2, [pc, #756]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e020      	b.n	80018d8 <HAL_RCC_OscConfig+0x9ac>
 8001896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x994>
 80018a6:	4bb7      	ldr	r3, [pc, #732]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4ab6      	ldr	r2, [pc, #728]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4bb4      	ldr	r3, [pc, #720]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4ab3      	ldr	r2, [pc, #716]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0x9ac>
 80018c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4aaf      	ldr	r2, [pc, #700]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	4bad      	ldr	r3, [pc, #692]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4aac      	ldr	r2, [pc, #688]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8081 	beq.w	80019ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff f865 	bl	80009b8 <HAL_GetTick>
 80018ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff f860 	bl	80009b8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e345      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
 800190c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001910:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001914:	2202      	movs	r2, #2
 8001916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001938:	2202      	movs	r2, #2
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	fa93 f2a3 	rbit	r2, r3
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001952:	601a      	str	r2, [r3, #0]
  return result;
 8001954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001958:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800195c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0xa4c>
 8001972:	4b84      	ldr	r3, [pc, #528]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	e013      	b.n	80019a0 <HAL_RCC_OscConfig+0xa74>
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001980:	2202      	movs	r2, #2
 8001982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001996:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4b79      	ldr	r3, [pc, #484]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019a8:	2102      	movs	r1, #2
 80019aa:	6011      	str	r1, [r2, #0]
 80019ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	fa92 f1a2 	rbit	r1, r2
 80019ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019be:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019c2:	6011      	str	r1, [r2, #0]
  return result;
 80019c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019c8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	fab2 f282 	clz	r2, r2
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f002 021f 	and.w	r2, r2, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d084      	beq.n	80018f4 <HAL_RCC_OscConfig+0x9c8>
 80019ea:	e07f      	b.n	8001aec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7fe ffe4 	bl	80009b8 <HAL_GetTick>
 80019f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	e00b      	b.n	8001a0e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7fe ffdf 	bl	80009b8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e2c4      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
 8001a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a12:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a16:	2202      	movs	r2, #2
 8001a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa93 f2a3 	rbit	r2, r3
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a42:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a54:	601a      	str	r2, [r3, #0]
  return result;
 8001a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d102      	bne.n	8001a7a <HAL_RCC_OscConfig+0xb4e>
 8001a74:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	e013      	b.n	8001aa2 <HAL_RCC_OscConfig+0xb76>
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a98:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	4b39      	ldr	r3, [pc, #228]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aa6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001aaa:	2102      	movs	r1, #2
 8001aac:	6011      	str	r1, [r2, #0]
 8001aae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ab2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	fa92 f1a2 	rbit	r1, r2
 8001abc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ac4:	6011      	str	r1, [r2, #0]
  return result;
 8001ac6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f002 021f 	and.w	r2, r2, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d184      	bne.n	80019f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aec:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	4a22      	ldr	r2, [pc, #136]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8242 	beq.w	8001f96 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <HAL_RCC_OscConfig+0xc58>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	f000 8213 	beq.w	8001f46 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	f040 8162 	bne.w	8001df6 <HAL_RCC_OscConfig+0xeca>
 8001b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b36:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b44:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b52:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b56:	601a      	str	r2, [r3, #0]
  return result;
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7fe ff1e 	bl	80009b8 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	e00c      	b.n	8001b9c <HAL_RCC_OscConfig+0xc70>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe ff16 	bl	80009b8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1fd      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bc0:	601a      	str	r2, [r3, #0]
  return result;
 8001bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_OscConfig+0xcba>
 8001be0:	4bb0      	ldr	r3, [pc, #704]	@ (8001ea4 <HAL_RCC_OscConfig+0xf78>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	e027      	b.n	8001c36 <HAL_RCC_OscConfig+0xd0a>
 8001be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001bee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	4b9c      	ldr	r3, [pc, #624]	@ (8001ea4 <HAL_RCC_OscConfig+0xf78>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c3a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c3e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c42:	6011      	str	r1, [r2, #0]
 8001c44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c48:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	fa92 f1a2 	rbit	r1, r2
 8001c52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c56:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c5a:	6011      	str	r1, [r2, #0]
  return result;
 8001c5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c60:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	fab2 f282 	clz	r2, r2
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f042 0220 	orr.w	r2, r2, #32
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f002 021f 	and.w	r2, r2, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d182      	bne.n	8001b88 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c82:	4b88      	ldr	r3, [pc, #544]	@ (8001ea4 <HAL_RCC_OscConfig+0xf78>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	497f      	ldr	r1, [pc, #508]	@ (8001ea4 <HAL_RCC_OscConfig+0xf78>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
 8001caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cae:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cb2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fa93 f2a3 	rbit	r2, r3
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001cce:	601a      	str	r2, [r3, #0]
  return result;
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001cd8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ce4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	2301      	movs	r3, #1
 8001cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fe62 	bl	80009b8 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	e009      	b.n	8001d0e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe fe5d 	bl	80009b8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e144      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d20:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fa93 f2a3 	rbit	r2, r3
 8001d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d32:	601a      	str	r2, [r3, #0]
  return result;
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_OscConfig+0xe2c>
 8001d52:	4b54      	ldr	r3, [pc, #336]	@ (8001ea4 <HAL_RCC_OscConfig+0xf78>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e027      	b.n	8001da8 <HAL_RCC_OscConfig+0xe7c>
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d82:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001d86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea4 <HAL_RCC_OscConfig+0xf78>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dac:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001db0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001db4:	6011      	str	r1, [r2, #0]
 8001db6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dba:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fa92 f1a2 	rbit	r1, r2
 8001dc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dc8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001dcc:	6011      	str	r1, [r2, #0]
  return result;
 8001dce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dd2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f042 0220 	orr.w	r2, r2, #32
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d082      	beq.n	8001cfa <HAL_RCC_OscConfig+0xdce>
 8001df4:	e0cf      	b.n	8001f96 <HAL_RCC_OscConfig+0x106a>
 8001df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001dfe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e08:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	fa93 f2a3 	rbit	r2, r3
 8001e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e16:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e1a:	601a      	str	r2, [r3, #0]
  return result;
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	461a      	mov	r2, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fdbc 	bl	80009b8 <HAL_GetTick>
 8001e40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7fe fdb7 	bl	80009b8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e09e      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
 8001e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e7e:	601a      	str	r2, [r3, #0]
  return result;
 8001e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e84:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d104      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xf7c>
 8001e9e:	4b01      	ldr	r3, [pc, #4]	@ (8001ea4 <HAL_RCC_OscConfig+0xf78>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e029      	b.n	8001ef8 <HAL_RCC_OscConfig+0xfcc>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ed6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f2a3 	rbit	r2, r3
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_OscConfig+0x1078>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001efc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f00:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f04:	6011      	str	r1, [r2, #0]
 8001f06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f0a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	fa92 f1a2 	rbit	r1, r2
 8001f14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f18:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f1c:	6011      	str	r1, [r2, #0]
  return result;
 8001f1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f22:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f042 0220 	orr.w	r2, r2, #32
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f002 021f 	and.w	r2, r2, #31
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d180      	bne.n	8001e46 <HAL_RCC_OscConfig+0xf1a>
 8001f44:	e027      	b.n	8001f96 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e01e      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_RCC_OscConfig+0x1078>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f66:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d10b      	bne.n	8001f92 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b09e      	sub	sp, #120	@ 0x78
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e162      	b.n	8002286 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b90      	ldr	r3, [pc, #576]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d910      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b8d      	ldr	r3, [pc, #564]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0207 	bic.w	r2, r3, #7
 8001fd6:	498b      	ldr	r1, [pc, #556]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b89      	ldr	r3, [pc, #548]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e14a      	b.n	8002286 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b82      	ldr	r3, [pc, #520]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	497f      	ldr	r1, [pc, #508]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80dc 	beq.w	80021d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d13c      	bne.n	800209e <HAL_RCC_ClockConfig+0xf6>
 8002024:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002028:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d102      	bne.n	800204e <HAL_RCC_ClockConfig+0xa6>
 8002048:	4b6f      	ldr	r3, [pc, #444]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e00f      	b.n	800206e <HAL_RCC_ClockConfig+0xc6>
 800204e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002052:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	667b      	str	r3, [r7, #100]	@ 0x64
 800205c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002060:	663b      	str	r3, [r7, #96]	@ 0x60
 8002062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800206a:	4b67      	ldr	r3, [pc, #412]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002072:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800207c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800207e:	fab2 f282 	clz	r2, r2
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	f042 0220 	orr.w	r2, r2, #32
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f002 021f 	and.w	r2, r2, #31
 800208e:	2101      	movs	r1, #1
 8002090:	fa01 f202 	lsl.w	r2, r1, r2
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d17b      	bne.n	8002192 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0f3      	b.n	8002286 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d13c      	bne.n	8002120 <HAL_RCC_ClockConfig+0x178>
 80020a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x128>
 80020ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_ClockConfig+0x148>
 80020d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80020de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ec:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80020f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80020fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d13a      	bne.n	8002192 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b2      	b.n	8002286 <HAL_RCC_ClockConfig+0x2de>
 8002120:	2302      	movs	r3, #2
 8002122:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800212c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1a0>
 8002142:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e00d      	b.n	8002164 <HAL_RCC_ClockConfig+0x1bc>
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
 8002154:	2302      	movs	r3, #2
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	2202      	movs	r2, #2
 8002166:	61ba      	str	r2, [r7, #24]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	fa92 f2a2 	rbit	r2, r2
 800216e:	617a      	str	r2, [r7, #20]
  return result;
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e079      	b.n	8002286 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	491a      	ldr	r1, [pc, #104]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a4:	f7fe fc08 	bl	80009b8 <HAL_GetTick>
 80021a8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe fc04 	bl	80009b8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e061      	b.n	8002286 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_RCC_ClockConfig+0x260>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d214      	bcs.n	800220c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	4906      	ldr	r1, [pc, #24]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <HAL_RCC_ClockConfig+0x25c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e040      	b.n	8002286 <HAL_RCC_ClockConfig+0x2de>
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_RCC_ClockConfig+0x2e8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	491a      	ldr	r1, [pc, #104]	@ (8002290 <HAL_RCC_ClockConfig+0x2e8>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002236:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <HAL_RCC_ClockConfig+0x2e8>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4912      	ldr	r1, [pc, #72]	@ (8002290 <HAL_RCC_ClockConfig+0x2e8>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800224a:	f000 f829 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800224e:	4601      	mov	r1, r0
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <HAL_RCC_ClockConfig+0x2e8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002258:	22f0      	movs	r2, #240	@ 0xf0
 800225a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	fa92 f2a2 	rbit	r2, r2
 8002262:	60fa      	str	r2, [r7, #12]
  return result;
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	fab2 f282 	clz	r2, r2
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	40d3      	lsrs	r3, r2
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <HAL_RCC_ClockConfig+0x2ec>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	fa21 f303 	lsr.w	r3, r1, r3
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_RCC_ClockConfig+0x2f0>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800227a:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_RCC_ClockConfig+0x2f4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fb56 	bl	8000930 <HAL_InitTick>
  
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3778      	adds	r7, #120	@ 0x78
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	080023d4 	.word	0x080023d4
 8002298:	20000000 	.word	0x20000000
 800229c:	20000004 	.word	0x20000004

080022a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x94>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ce:	e026      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x98>)
 80022d2:	613b      	str	r3, [r7, #16]
      break;
 80022d4:	e026      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80022e4:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x94>)
 80022e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	fbb2 f2f3 	udiv	r2, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e004      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0c      	ldr	r2, [pc, #48]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x98>)
 8002320:	613b      	str	r3, [r7, #16]
      break;
 8002322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002324:	693b      	ldr	r3, [r7, #16]
}
 8002326:	4618      	mov	r0, r3
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	007a1200 	.word	0x007a1200
 800233c:	080023e4 	.word	0x080023e4
 8002340:	080023f4 	.word	0x080023f4
 8002344:	003d0900 	.word	0x003d0900

08002348 <memset>:
 8002348:	4402      	add	r2, r0
 800234a:	4603      	mov	r3, r0
 800234c:	4293      	cmp	r3, r2
 800234e:	d100      	bne.n	8002352 <memset+0xa>
 8002350:	4770      	bx	lr
 8002352:	f803 1b01 	strb.w	r1, [r3], #1
 8002356:	e7f9      	b.n	800234c <memset+0x4>

08002358 <__libc_init_array>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d0d      	ldr	r5, [pc, #52]	@ (8002390 <__libc_init_array+0x38>)
 800235c:	4c0d      	ldr	r4, [pc, #52]	@ (8002394 <__libc_init_array+0x3c>)
 800235e:	1b64      	subs	r4, r4, r5
 8002360:	10a4      	asrs	r4, r4, #2
 8002362:	2600      	movs	r6, #0
 8002364:	42a6      	cmp	r6, r4
 8002366:	d109      	bne.n	800237c <__libc_init_array+0x24>
 8002368:	4d0b      	ldr	r5, [pc, #44]	@ (8002398 <__libc_init_array+0x40>)
 800236a:	4c0c      	ldr	r4, [pc, #48]	@ (800239c <__libc_init_array+0x44>)
 800236c:	f000 f818 	bl	80023a0 <_init>
 8002370:	1b64      	subs	r4, r4, r5
 8002372:	10a4      	asrs	r4, r4, #2
 8002374:	2600      	movs	r6, #0
 8002376:	42a6      	cmp	r6, r4
 8002378:	d105      	bne.n	8002386 <__libc_init_array+0x2e>
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002380:	4798      	blx	r3
 8002382:	3601      	adds	r6, #1
 8002384:	e7ee      	b.n	8002364 <__libc_init_array+0xc>
 8002386:	f855 3b04 	ldr.w	r3, [r5], #4
 800238a:	4798      	blx	r3
 800238c:	3601      	adds	r6, #1
 800238e:	e7f2      	b.n	8002376 <__libc_init_array+0x1e>
 8002390:	08002404 	.word	0x08002404
 8002394:	08002404 	.word	0x08002404
 8002398:	08002404 	.word	0x08002404
 800239c:	08002408 	.word	0x08002408

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
